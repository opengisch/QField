From 80a0ad58ed14dfbe56cc03ac8c8b93a087852971 Mon Sep 17 00:00:00 2001
From: Ivan Solovev <ivan.solovev@qt.io>
Date: Wed, 25 Jun 2025 12:37:09 +0200
Subject: [PATCH] Android: fix MSL altitude usage

Commit 0f3efd9b280ba3151352e9e3bfa67b4c22e0a0f2 added support for MSL
altitude calculation on Android 14+.
Back then, on Android 14, the developer had to manually use the
AltitudeConverter in order to add MSL altitude to the Location object.

However, Android 15 now adds this altitude unconditionally.
As a result, the logic from the original patch was broken, because
on the C++ side we simply used the MSL value if it was available,
assuming that only we could add it earlier on the Java side.

This patch updates the logic to also take the plugin parameter value
into account on the C++ side.

Amends 0f3efd9b280ba3151352e9e3bfa67b4c22e0a0f2 which was added in
Qt 6.8.

Task-number: QTBUG-106049
Pick-to: 6.10 6.9 6.8
Change-Id: I9ed6d14f4431bb337faeac4cb93cd7989568267c
Reviewed-by: Juha Vuolle <juha.vuolle@qt.io>
---
 .../qt/android/positioning/QtPositioning.java    |  2 ++
 .../position/android/src/jnipositioning.cpp      | 16 +++++++++++-----
 2 files changed, 13 insertions(+), 5 deletions(-)

diff --git a/src/plugins/position/android/jar/src/org/qtproject/qt/android/positioning/QtPositioning.java b/src/plugins/position/android/jar/src/org/qtproject/qt/android/positioning/QtPositioning.java
index e4163b093..afb2889e0 100644
--- a/src/plugins/position/android/jar/src/org/qtproject/qt/android/positioning/QtPositioning.java
+++ b/src/plugins/position/android/jar/src/org/qtproject/qt/android/positioning/QtPositioning.java
@@ -112,6 +112,8 @@ static private int[] providerList()
     static private void addMslAltitude(Location location)
     {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
+            if (location.hasMslAltitude()) // Nothing to be done
+                return;
             if (altitudeConverter == null)
                 altitudeConverter = new AltitudeConverter();
             try {
diff --git a/src/plugins/position/android/src/jnipositioning.cpp b/src/plugins/position/android/src/jnipositioning.cpp
index 2b2919fa7..0abc2cadc 100644
--- a/src/plugins/position/android/src/jnipositioning.cpp
+++ b/src/plugins/position/android/src/jnipositioning.cpp
@@ -220,7 +220,7 @@ namespace AndroidPositioning {
         return ret;
     }
 
-    QGeoPositionInfo positionInfoFromJavaLocation(const jobject &location)
+    QGeoPositionInfo positionInfoFromJavaLocation(const jobject &location, bool useAltConverter)
     {
         QGeoPositionInfo info;
 
@@ -241,8 +241,11 @@ namespace AndroidPositioning {
                 coordinate.setAltitude(value);
         }
         // MSL altitude, available in API Level 34+.
-        // It will be available only if we requested it when starting updates.
-        if (QNativeInterface::QAndroidApplication::sdkVersion() >= 34) {
+        // In API Level 34 it was available only if we manually added it.
+        // In API Level 35 (and potentially later), it's automatically added
+        // to the location object, so we need to use it *only* when the user
+        // set the relevant plugin parameter.
+        if (useAltConverter && QNativeInterface::QAndroidApplication::sdkVersion() >= 34) {
             attributeExists = jniObject.callMethod<jboolean>("hasMslAltitude");
             if (attributeExists) {
                 const jdouble value = jniObject.callMethod<jdouble>("getMslAltitudeMeters");
@@ -451,7 +454,7 @@ namespace AndroidPositioning {
         if (location == nullptr)
             return QGeoPositionInfo();
 
-        const QGeoPositionInfo info = positionInfoFromJavaLocation(location);
+        const QGeoPositionInfo info = positionInfoFromJavaLocation(location, useAltitudeConverter);
 
         return info;
     }
@@ -615,7 +618,6 @@ static void positionUpdated(JNIEnv *env, jobject thiz, QtJniTypes::Location loca
 {
     Q_UNUSED(env);
     Q_UNUSED(thiz);
-    QGeoPositionInfo info = AndroidPositioning::positionInfoFromJavaLocation(location.object());
 
     QGeoPositionInfoSourceAndroid *source = AndroidPositioning::idToPosSource()->value(androidClassKey);
     if (!source) {
@@ -623,6 +625,10 @@ static void positionUpdated(JNIEnv *env, jobject thiz, QtJniTypes::Location loca
         return;
     }
 
+    const bool useAltitudeConverter = source->useAltitudeConverter();
+    QGeoPositionInfo info =
+            AndroidPositioning::positionInfoFromJavaLocation(location.object(), useAltitudeConverter);
+
     //we need to invoke indirectly as the Looper thread is likely to be not the same thread
     if (!isSingleUpdate)
         QMetaObject::invokeMethod(source, "processPositionUpdate", Qt::AutoConnection,
