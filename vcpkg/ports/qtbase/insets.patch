diff --git a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
index 4bd5300bd76d..1f5ae6c2ad95 100644
--- a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
+++ b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
@@ -75,47 +75,81 @@ public void onLongPress(MotionEvent event) {
                 });
             m_gestureDetector.setIsLongpressEnabled(true);
         });
+    }
 
-        if (getContext() instanceof QtActivityBase) {
-            setOnApplyWindowInsetsListener((view, insets) -> {
-                Insets safeInsets;
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
-                    int types = WindowInsets.Type.displayCutout() | WindowInsets.Type.systemBars();
-                    safeInsets = insets.getInsets(types);
-                } else {
-                    int left = 0;
-                    int top = 0;
-                    int right = 0;
-                    int bottom = 0;
-
-                    int visibility = view.getSystemUiVisibility();
-                    if ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {
-                        left = insets.getSystemWindowInsetLeft();
-                        top = insets.getSystemWindowInsetTop();
-                        right = insets.getSystemWindowInsetRight();
-                        bottom = insets.getSystemWindowInsetBottom();
-                    }
+    @UsedFromNativeCode
+    void registerSafeAreaMarginsListner(boolean isTopLevel, boolean isSameWindowAndScreenSize)
+    {
+        if (!(getContext() instanceof QtActivityBase))
+            return;
 
-                    // Android 9 and 10 emulators don't seem to be able
-                    // to handle this, but let's have the logic here anyway
-                    DisplayCutout cutout = insets.getDisplayCutout();
-                    if (cutout != null) {
-                        left = Math.max(left, cutout.getSafeInsetLeft());
-                        top = Math.max(top, cutout.getSafeInsetTop());
-                        right = Math.max(right, cutout.getSafeInsetRight());
-                        bottom = Math.max(bottom, cutout.getSafeInsetBottom());
-                    }
+        setOnApplyWindowInsetsListener((view, insets) -> {
+            Insets safeInsets = getSafeInsets(view, insets);
+            safeAreaMarginsChanged(safeInsets, getId());
+            return getConsumedInsets(insets);
+        });
 
-                    safeInsets = Insets.of(left, top, right, bottom);
-                }
+        // NOTE: if the window size fits the screen geometry (i.e. edge-to-edge case),
+        // assume this window is the main window and initialize its safe margins with
+        // the insets of the decor view.
+        if (isTopLevel && isSameWindowAndScreenSize) {
+            QtNative.runAction(() -> {
+                // NOTE: The callback onApplyWindowInsetsListener() is not being triggered during
+                // startup, so this is a Workaround to get the safe area margins at startup.
+                // Initially, set the root view insets to the current window, then if the insets
+                // change later, we can rely on setOnApplyWindowInsetsListener() being called.
+                View decorView = ((Activity) getContext()).getWindow().getDecorView();
+                WindowInsets rootInsets = decorView.getRootWindowInsets();
+                Insets rootSafeInsets = getSafeInsets(decorView, rootInsets);
+                safeAreaMarginsChanged(rootSafeInsets, getId());
+            });
+        }
 
-                QtNative.runAction(() -> safeAreaMarginsChanged(safeInsets, getId()));
+        QtNative.runAction(() -> requestApplyInsets());
+    }
 
-                return insets;
-            });
+    @SuppressWarnings("deprecation")
+    WindowInsets getConsumedInsets(WindowInsets insets)
+    {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R)
+            return WindowInsets.CONSUMED;
+        else
+            return insets.consumeSystemWindowInsets();
+    }
+
+    @SuppressWarnings("deprecation")
+    Insets getSafeInsets(View view, WindowInsets insets)
+    {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
+            int types = WindowInsets.Type.displayCutout() | WindowInsets.Type.systemBars();
+            return insets.getInsets(types);
+        }
 
-            QtNative.runAction(() -> requestApplyInsets());
+        // Android R and older
+        int left = 0;
+        int top = 0;
+        int right = 0;
+        int bottom = 0;
+
+        int visibility = view.getSystemUiVisibility();
+        if ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {
+            left = insets.getSystemWindowInsetLeft();
+            top = insets.getSystemWindowInsetTop();
+            right = insets.getSystemWindowInsetRight();
+            bottom = insets.getSystemWindowInsetBottom();
         }
+
+        // Android 9 and 10 emulators don't seem to be able
+        // to handle this, but let's have the logic here anyway
+        DisplayCutout cutout = insets.getDisplayCutout();
+        if (cutout != null) {
+            left = Math.max(left, cutout.getSafeInsetLeft());
+            top = Math.max(top, cutout.getSafeInsetTop());
+            right = Math.max(right, cutout.getSafeInsetRight());
+            bottom = Math.max(bottom, cutout.getSafeInsetBottom());
+        }
+
+        return Insets.of(left, top, right, bottom);
     }
 
     @UsedFromNativeCode
diff --git a/src/plugins/platforms/android/qandroidplatformwindow.cpp b/src/plugins/platforms/android/qandroidplatformwindow.cpp
index e22f336bc514..e904145a7c91 100644
--- a/src/plugins/platforms/android/qandroidplatformwindow.cpp
+++ b/src/plugins/platforms/android/qandroidplatformwindow.cpp
@@ -96,6 +96,11 @@ void QAndroidPlatformWindow::initialize()
     }
     qCDebug(lcQpaWindow) << "Window" << m_nativeViewId << "using surface container type"
                          << static_cast<int>(m_surfaceContainerType);
+
+    const bool isSameWindowAndScreenSize = geometry().size() == screen()->geometry().size();
+    m_nativeQtWindow.callMethod<void>("registerSafeAreaMarginsListner",
+                                window->isTopLevel(), isSameWindowAndScreenSize);
+
 }
 
 QAndroidPlatformWindow::~QAndroidPlatformWindow()
diff --git a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
index 1f5ae6c2ad95..3eb6e65e294a 100644
--- a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
+++ b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
@@ -15,8 +15,8 @@
 import android.view.Surface;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
 import android.view.WindowInsets;
-
 import android.os.Build;
 
 import java.util.HashMap;
@@ -30,6 +30,7 @@ class QtWindow extends QtLayout implements QtSurfaceInterface {
     private GestureDetector m_gestureDetector;
     private final QtEditText m_editText;
     private final QtInputConnection.QtInputConnectionListener m_inputConnectionListener;
+    private boolean m_firstSafeMarginsDelivered = false;
 
     private static native void setSurface(int windowId, Surface surface);
     private static native void safeAreaMarginsChanged(Insets insets, int id);
@@ -75,46 +76,71 @@ public void onLongPress(MotionEvent event) {
                 });
             m_gestureDetector.setIsLongpressEnabled(true);
         });
+
+        registerSafeAreaMarginsListener();
     }
 
-    @UsedFromNativeCode
-    void registerSafeAreaMarginsListner(boolean isTopLevel, boolean isSameWindowAndScreenSize)
+    void registerSafeAreaMarginsListener()
     {
         if (!(getContext() instanceof QtActivityBase))
             return;
 
         setOnApplyWindowInsetsListener((view, insets) -> {
-            Insets safeInsets = getSafeInsets(view, insets);
+            WindowInsets windowInsets = view.onApplyWindowInsets(insets);
+            Insets safeInsets = getSafeInsets(this, windowInsets);
             safeAreaMarginsChanged(safeInsets, getId());
-            return getConsumedInsets(insets);
+            m_firstSafeMarginsDelivered = true;
+
+            return windowInsets;
         });
 
-        // NOTE: if the window size fits the screen geometry (i.e. edge-to-edge case),
-        // assume this window is the main window and initialize its safe margins with
-        // the insets of the decor view.
-        if (isTopLevel && isSameWindowAndScreenSize) {
-            QtNative.runAction(() -> {
-                // NOTE: The callback onApplyWindowInsetsListener() is not being triggered during
-                // startup, so this is a Workaround to get the safe area margins at startup.
-                // Initially, set the root view insets to the current window, then if the insets
-                // change later, we can rely on setOnApplyWindowInsetsListener() being called.
-                View decorView = ((Activity) getContext()).getWindow().getDecorView();
-                WindowInsets rootInsets = decorView.getRootWindowInsets();
-                Insets rootSafeInsets = getSafeInsets(decorView, rootInsets);
-                safeAreaMarginsChanged(rootSafeInsets, getId());
+        // If the window is attached, try to directly deliver root insets
+        if (isAttachedToWindow()) {
+            WindowInsets insets = getRootWindowInsets();
+            if (insets != null) {
+                safeAreaMarginsChanged(getSafeInsets(this, insets), getId());
+                m_firstSafeMarginsDelivered = true;
+            }
+        } else { // Otherwise request it upon attachement
+            addOnAttachStateChangeListener(new View.OnAttachStateChangeListener() {
+                @Override
+                public void onViewAttachedToWindow(View view) {
+                    view.removeOnAttachStateChangeListener(this);
+                    view.requestApplyInsets();
+                }
+
+                @Override
+                public void onViewDetachedFromWindow(View view) {}
             });
         }
 
-        QtNative.runAction(() -> requestApplyInsets());
-    }
+        // Further, tag into pre draw to deliver safe area margins early on
+        if (!m_firstSafeMarginsDelivered) {
+            ViewTreeObserver.OnPreDrawListener listener = new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    if (m_firstSafeMarginsDelivered) {
+                        getViewTreeObserver().removeOnPreDrawListener(this);
+                        return true;
+                    }
 
-    @SuppressWarnings("deprecation")
-    WindowInsets getConsumedInsets(WindowInsets insets)
-    {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R)
-            return WindowInsets.CONSUMED;
-        else
-            return insets.consumeSystemWindowInsets();
+                    if (isAttachedToWindow()) {
+                        WindowInsets insets = getRootWindowInsets();
+                        if (insets != null) {
+                            getViewTreeObserver().removeOnPreDrawListener(this);
+                            safeAreaMarginsChanged(getSafeInsets(QtWindow.this, insets), getId());
+                            m_firstSafeMarginsDelivered = true;
+                            return true;
+                        }
+                    }
+
+                    requestApplyInsets();
+
+                    return true;
+                }
+            };
+            getViewTreeObserver().addOnPreDrawListener(listener);
+        }
     }
 
     @SuppressWarnings("deprecation")
diff --git a/src/plugins/platforms/android/qandroidplatformwindow.cpp b/src/plugins/platforms/android/qandroidplatformwindow.cpp
index efd5c37b50bd..16cef4c14592 100644
--- a/src/plugins/platforms/android/qandroidplatformwindow.cpp
+++ b/src/plugins/platforms/android/qandroidplatformwindow.cpp
@@ -97,11 +97,6 @@ void QAndroidPlatformWindow::initialize()
     }
     qCDebug(lcQpaWindow) << "Window" << m_nativeViewId << "using surface container type"
                          << static_cast<int>(m_surfaceContainerType);
-
-    const bool isSameWindowAndScreenSize = geometry().size() == screen()->geometry().size();
-    m_nativeQtWindow.callMethod<void>("registerSafeAreaMarginsListner",
-                                window->isTopLevel(), isSameWindowAndScreenSize);
-
 }
 
 QAndroidPlatformWindow::~QAndroidPlatformWindow()
diff --git a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
index 3eb6e65e294..02c7139681a 100644
--- a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
+++ b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
@@ -87,9 +87,15 @@ void registerSafeAreaMarginsListener()
 
         setOnApplyWindowInsetsListener((view, insets) -> {
             WindowInsets windowInsets = view.onApplyWindowInsets(insets);
-            Insets safeInsets = getSafeInsets(this, windowInsets);
-            safeAreaMarginsChanged(safeInsets, getId());
-            m_firstSafeMarginsDelivered = true;
+            ViewTreeObserver.OnPreDrawListener listener = new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    reportSafeAreaMargins(windowInsets, getId());
+                    m_firstSafeMarginsDelivered = true;
+                    return true;
+                }
+            };
+            getViewTreeObserver().addOnPreDrawListener(listener);
 
             return windowInsets;
         });
@@ -98,7 +104,7 @@ void registerSafeAreaMarginsListener()
         if (isAttachedToWindow()) {
             WindowInsets insets = getRootWindowInsets();
             if (insets != null) {
-                safeAreaMarginsChanged(getSafeInsets(this, insets), getId());
+                getRootView().post(() -> reportSafeAreaMargins(insets, getId()));
                 m_firstSafeMarginsDelivered = true;
             }
         } else { // Otherwise request it upon attachement
@@ -128,7 +134,7 @@ public boolean onPreDraw() {
                         WindowInsets insets = getRootWindowInsets();
                         if (insets != null) {
                             getViewTreeObserver().removeOnPreDrawListener(this);
-                            safeAreaMarginsChanged(getSafeInsets(QtWindow.this, insets), getId());
+                            getRootView().post(() -> reportSafeAreaMargins(insets, getId()));
                             m_firstSafeMarginsDelivered = true;
                             return true;
                         }
@@ -152,18 +158,10 @@ Insets getSafeInsets(View view, WindowInsets insets)
         }
 
         // Android R and older
-        int left = 0;
-        int top = 0;
-        int right = 0;
-        int bottom = 0;
-
-        int visibility = view.getSystemUiVisibility();
-        if ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {
-            left = insets.getSystemWindowInsetLeft();
-            top = insets.getSystemWindowInsetTop();
-            right = insets.getSystemWindowInsetRight();
-            bottom = insets.getSystemWindowInsetBottom();
-        }
+        int left = insets.getSystemWindowInsetLeft();
+        int top = insets.getSystemWindowInsetTop();
+        int right = insets.getSystemWindowInsetRight();
+        int bottom = insets.getSystemWindowInsetBottom();
 
         // Android 9 and 10 emulators don't seem to be able
         // to handle this, but let's have the logic here anyway
@@ -178,6 +176,36 @@ Insets getSafeInsets(View view, WindowInsets insets)
         return Insets.of(left, top, right, bottom);
     }
 
+    private void reportSafeAreaMargins(WindowInsets insets, int id)
+    {
+        View rootView = getRootView();
+
+        int[] rootLocation = new int[2];
+        rootView.getLocationOnScreen(rootLocation);
+        int rootX = rootLocation[0];
+        int rootY = rootLocation[1];
+
+        int[] windowLocation = new int[2];
+        getLocationOnScreen(windowLocation);
+        int windowX = windowLocation[0];
+        int windowY = windowLocation[1];
+
+        // Offset values of window from root
+        int leftOffset = windowX - rootX;
+        int topOffset = windowY - rootY;
+        int rightOffset = (rootX + rootView.getWidth()) - (windowX + getWidth());
+        int bottomOffset = (rootY + rootView.getHeight()) - (windowY + getHeight());
+
+        // Find the remaining minimum safe margins
+        Insets safeInsets = getSafeInsets(this, insets);
+        int left = safeInsets.left > 0 ? Math.max(0, safeInsets.left - leftOffset) : 0;
+        int top = safeInsets.top > 0 ? Math.max(0, safeInsets.top - topOffset) : 0;
+        int right = safeInsets.right > 0 ? Math.max(0, safeInsets.right - rightOffset) : 0;
+        int bottom = safeInsets.bottom > 0 ? Math.max(0, safeInsets.bottom - bottomOffset) : 0;
+
+        safeAreaMarginsChanged(Insets.of(left, top, right, bottom), id);
+    }
+
     @UsedFromNativeCode
     void setVisible(boolean visible) {
         QtNative.runAction(() -> {
diff --git a/src/plugins/platforms/android/qandroidplatformwindow.cpp b/src/plugins/platforms/android/qandroidplatformwindow.cpp
index 16cef4c1459..d849b8f6f82 100644
--- a/src/plugins/platforms/android/qandroidplatformwindow.cpp
+++ b/src/plugins/platforms/android/qandroidplatformwindow.cpp
@@ -400,28 +400,33 @@ void QAndroidPlatformWindow::safeAreaMarginsChanged(JNIEnv *env, jobject object,
     if (!qGuiApp)
         return;
 
-    QMargins safeMargins;
-    if (insets.isValid()) {
-        safeMargins = QMargins(
-            insets.getField<int>("left"),
-            insets.getField<int>("top"),
-            insets.getField<int>("right"),
-            insets.getField<int>("bottom"));
-    }
+    if (!insets.isValid())
+        return;
 
+    QAndroidPlatformWindow *pWindow = nullptr;
     for (QWindow *window : qGuiApp->allWindows()) {
         if (!window->handle())
             continue;
-        QAndroidPlatformWindow *pWindow = static_cast<QAndroidPlatformWindow *>(window->handle());
-        if (pWindow->nativeViewId() != id)
-            continue;
-
-        if (safeMargins != pWindow->safeAreaMargins()) {
-            pWindow->setSafeAreaMargins(safeMargins);
-            QWindowSystemInterface::handleSafeAreaMarginsChanged(window);
+        QAndroidPlatformWindow *pw = static_cast<QAndroidPlatformWindow *>(window->handle());
+        if (pw->nativeViewId() == id) {
+            pWindow = pw;
             break;
         }
     }
+
+    if (!pWindow)
+        return;
+
+    QMargins safeMargins = QMargins(
+                insets.getField<int>("left"),
+                insets.getField<int>("top"),
+                insets.getField<int>("right"),
+                insets.getField<int>("bottom"));
+
+    if (safeMargins != pWindow->safeAreaMargins()) {
+        pWindow->setSafeAreaMargins(safeMargins);
+        QWindowSystemInterface::handleSafeAreaMarginsChanged(pWindow->window());
+    }
 }
 
 static void updateWindows(JNIEnv *env, jobject object)
diff --git a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
index 02c7139681a..45d0c684469 100644
--- a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
+++ b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
@@ -4,9 +4,10 @@
 package org.qtproject.qt.android;
 
 import android.annotation.SuppressLint;
+import android.app.ActionBar;
 import android.app.Activity;
 import android.content.Context;
-
+import android.content.res.TypedArray;
 import android.graphics.Insets;
 
 import android.view.DisplayCutout;
@@ -31,6 +32,7 @@ class QtWindow extends QtLayout implements QtSurfaceInterface {
     private final QtEditText m_editText;
     private final QtInputConnection.QtInputConnectionListener m_inputConnectionListener;
     private boolean m_firstSafeMarginsDelivered = false;
+    private int m_actionBarHeight = -1;
 
     private static native void setSurface(int windowId, Surface surface);
     private static native void safeAreaMarginsChanged(Insets insets, int id);
@@ -173,6 +175,17 @@ Insets getSafeInsets(View view, WindowInsets insets)
             bottom = Math.max(bottom, cutout.getSafeInsetBottom());
         }
 
+        // If a theme supports an action bar, sometimes it even if it's hidden
+        // the insets might report values including the bar's height, not entirely
+        // sure whether it's due to a delay or a bug, either way ensure the top
+        // margin doesn't include the action bar's height.
+        ActionBar actionBar = ((Activity) getContext()).getActionBar();
+        if (actionBar == null || !actionBar.isShowing()) {
+            int topWithoutActionBar = top - actionBarHeight();
+            if (topWithoutActionBar > 0)
+                top = topWithoutActionBar;
+        }
+
         return Insets.of(left, top, right, bottom);
     }
 
@@ -206,6 +219,20 @@ private void reportSafeAreaMargins(WindowInsets insets, int id)
         safeAreaMarginsChanged(Insets.of(left, top, right, bottom), id);
     }
 
+    private int actionBarHeight()
+    {
+        if (m_actionBarHeight == -1) {
+            TypedArray ta = getContext().getTheme().obtainStyledAttributes(
+                new int[] { android.R.attr.actionBarSize });
+            try {
+                m_actionBarHeight = ta.getDimensionPixelSize(0, 0);
+            } finally {
+                ta.recycle();
+            }
+        }
+        return m_actionBarHeight;
+    }
+
     @UsedFromNativeCode
     void setVisible(boolean visible) {
         QtNative.runAction(() -> {
diff --git a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
index 45d0c684469..fb0a7434371 100644
--- a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
+++ b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
@@ -89,15 +89,7 @@ void registerSafeAreaMarginsListener()
 
         setOnApplyWindowInsetsListener((view, insets) -> {
             WindowInsets windowInsets = view.onApplyWindowInsets(insets);
-            ViewTreeObserver.OnPreDrawListener listener = new ViewTreeObserver.OnPreDrawListener() {
-                @Override
-                public boolean onPreDraw() {
-                    reportSafeAreaMargins(windowInsets, getId());
-                    m_firstSafeMarginsDelivered = true;
-                    return true;
-                }
-            };
-            getViewTreeObserver().addOnPreDrawListener(listener);
+            reportSafeAreaMargins(windowInsets, getId());
 
             return windowInsets;
         });
@@ -127,11 +119,6 @@ public void onViewDetachedFromWindow(View view) {}
             ViewTreeObserver.OnPreDrawListener listener = new ViewTreeObserver.OnPreDrawListener() {
                 @Override
                 public boolean onPreDraw() {
-                    if (m_firstSafeMarginsDelivered) {
-                        getViewTreeObserver().removeOnPreDrawListener(this);
-                        return true;
-                    }
-
                     if (isAttachedToWindow()) {
                         WindowInsets insets = getRootWindowInsets();
                         if (insets != null) {
@@ -149,6 +136,12 @@ public boolean onPreDraw() {
             };
             getViewTreeObserver().addOnPreDrawListener(listener);
         }
+
+        addOnLayoutChangeListener((view, l, t, r, b, oldl, oldt, oldr, oldb) -> {
+            WindowInsets insets = getRootWindowInsets();
+            if (insets != null)
+                getRootView().post(() -> reportSafeAreaMargins(insets, getId()));
+        });
     }
 
     @SuppressWarnings("deprecation")
diff --git a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
index fb0a7434371..1871b5f2091 100644
--- a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
+++ b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
@@ -204,10 +204,10 @@ private void reportSafeAreaMargins(WindowInsets insets, int id)
 
         // Find the remaining minimum safe margins
         Insets safeInsets = getSafeInsets(this, insets);
-        int left = safeInsets.left > 0 ? Math.max(0, safeInsets.left - leftOffset) : 0;
-        int top = safeInsets.top > 0 ? Math.max(0, safeInsets.top - topOffset) : 0;
-        int right = safeInsets.right > 0 ? Math.max(0, safeInsets.right - rightOffset) : 0;
-        int bottom = safeInsets.bottom > 0 ? Math.max(0, safeInsets.bottom - bottomOffset) : 0;
+        int left = Math.max(0, Math.min(safeInsets.left, safeInsets.left - leftOffset));
+        int top = Math.max(0, Math.min(safeInsets.top, safeInsets.top - topOffset));
+        int right = Math.max(0, Math.min(safeInsets.right, safeInsets.right - rightOffset));
+        int bottom = Math.max(0, Math.min(safeInsets.bottom, safeInsets.bottom - bottomOffset));
 
         safeAreaMarginsChanged(Insets.of(left, top, right, bottom), id);
     }
diff --git a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
index 1871b5f2091..18966cf1bd4 100644
--- a/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
+++ b/src/android/jar/src/org/qtproject/qt/android/QtWindow.java
@@ -203,7 +203,7 @@ private void reportSafeAreaMargins(WindowInsets insets, int id)
         int bottomOffset = (rootY + rootView.getHeight()) - (windowY + getHeight());
 
         // Find the remaining minimum safe margins
-        Insets safeInsets = getSafeInsets(this, insets);
+        Insets safeInsets = getSafeInsets(rootView, insets);
         int left = Math.max(0, Math.min(safeInsets.left, safeInsets.left - leftOffset));
         int top = Math.max(0, Math.min(safeInsets.top, safeInsets.top - topOffset));
         int right = Math.max(0, Math.min(safeInsets.right, safeInsets.right - rightOffset));
